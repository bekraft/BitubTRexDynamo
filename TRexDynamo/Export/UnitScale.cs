using System.Collections.Generic;

using Autodesk.DesignScript.Runtime;

using Newtonsoft.Json;

namespace TRex.Export
{
    /// <summary>
    /// Fundamental concept of scaling model unit factor.
    /// </summary>
    [JsonObject(MemberSerialization.OptIn)]
    public sealed class UnitScale
    {
        /// <summary>
        /// Given unit factors
        /// </summary>
        [IsVisibleInDynamoLibrary(false)]
        public readonly static IDictionary<string, UnitScale> defined = new Dictionary<string, UnitScale>()
        {
            { "m", new UnitScale { Reference = "m", Name = "Meter", UnitsPerMeter = 1.0f } },
            { "mm", new UnitScale { Reference = "mm", Name = "Millimeter", UnitsPerMeter = 1000.0f } },
            { "cm", new UnitScale { Reference = "cm", Name = "Centimeter", UnitsPerMeter = 100.0f } },
            { "in", new UnitScale { Reference = "in", Name = "Inch", UnitsPerMeter = 1000.0f / 25.4f } }, // 25.4mm per inch
            { "ft", new UnitScale { Reference = "ft", Name = "Feet", UnitsPerMeter = 1000.0f /(12 * 25.4f) } }// 12 inch per foot                                                   
        };

        [IsVisibleInDynamoLibrary(false)]
        [JsonConstructor]
        public UnitScale()
        {
        }

        /// <summary>
        /// Gets the scale of this unit per meter.
        /// </summary>
        [IsVisibleInDynamoLibrary(false)]
        [JsonProperty]
        public float UnitsPerMeter { get; set; }

        /// <summary>
        /// The name of unit.
        /// </summary>
        [IsVisibleInDynamoLibrary(false)]
        [JsonProperty]
        public string Name { get; set; }

        /// <summary>
        /// The reference/identifier.
        /// </summary>
        [IsVisibleInDynamoLibrary(false)]
        [JsonProperty]
        public string Reference { get; set; }

        /// <summary>
        /// A new unit scale by data.
        /// </summary>
        /// <param name="reference">The short name</param>
        /// <param name="name">The name</param>
        /// <param name="unitsPerMeter">The factor</param>
        /// <returns>New unit scale</returns>
        [IsVisibleInDynamoLibrary(false)]
        public static UnitScale ByData(string reference, string name, float unitsPerMeter)
        {
            return new UnitScale { Reference = reference, Name = name, UnitsPerMeter = unitsPerMeter };
        }

        /// <summary>
        /// Returns a unit factor by given units per meter. <see cref="Reference"/> and <see cref="Name"/> are generated by factor.
        /// </summary>
        /// <param name="unitsPerMeter">The units per meter.</param>
        /// <returns>A compiled unit factor</returns>
        public static UnitScale ByUnitsPerMeter(float unitsPerMeter)
        {
            return new UnitScale { Reference = $"{unitsPerMeter}/m", Name = $"{unitsPerMeter} per meter", UnitsPerMeter = unitsPerMeter };
        }

        /// <summary>
        /// Combines two scales, and inherited model scale and a new nested scale of units per meter.
        /// </summary>
        /// <param name="modelScale">The given model scale</param>
        /// <param name="nestedScale">The intrinsic nested model scale</param>
        /// <returns>A combined unit scale, if nested scale is non-null otherwise the model scale</returns>
        public static UnitScale ByModelUnitScale(UnitScale nestedScale, UnitScale modelScale)
        {
            if (null != nestedScale)
            {
                return new UnitScale
                {
                    Reference = $"{nestedScale.Reference} => {modelScale.Reference}",
                    Name = $"{modelScale.Name} ({nestedScale.Name})",
                    UnitsPerMeter = modelScale.UnitsPerMeter / nestedScale.UnitsPerMeter
                };
            }
            else
            {
                return modelScale;
            }
        }

        public override string ToString()
        {
            return $"{UnitsPerMeter}/E ({Name})";
        }

        public override bool Equals(object obj)
        {
            return obj is UnitScale scale &&
                   UnitsPerMeter == scale.UnitsPerMeter &&
                   Name == scale.Name &&
                   Reference == scale.Reference;
        }

        public override int GetHashCode()
        {
            int hashCode = 1668436232;
            hashCode = hashCode * -1521134295 + UnitsPerMeter.GetHashCode();
            hashCode = hashCode * -1521134295 + EqualityComparer<string>.Default.GetHashCode(Name);
            hashCode = hashCode * -1521134295 + EqualityComparer<string>.Default.GetHashCode(Reference);
            return hashCode;
        }
    }
}
